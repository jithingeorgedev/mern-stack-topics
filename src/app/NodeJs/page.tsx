import { useState } from "react";

const NodeJs = () => {
    const topics = [
        { topic: 'use of middleware' },
        { topic: 'fs.stat()' },
        { topic: 'types of middleware' },
        { topic: 'dev-dependencies' },
        { topic: 'app.use' },
        { topic: 'res.send vs res.write' },
        { topic: 'express.json vs express.urlencoded' },
        { topic: 'Parts of request and response' },
        { topic: 'exception handling' },
        { topic: 'CSRF' },
        { topic: 'http methods' },
        { topic: 'import vs require' },
        { topic: 'nodemon' },
        { topic: 'npm vs yarn' },
        { topic: 'package.json vs package-lock.json' },
        { topic: 'authentication vs authorization' },
        { topic: 'JSON' },
        { topic: 'JWT' },
        { topic: 'finally' },
        { topic: 'handle async code in nodejs' },
        { topic: 'threadpool' },
        { topic: 'Session handling - pending' },
        { topic: 'session storage limit' },
        { topic: 'cookie vs localStorage' },
        { topic: 'cookie vs cache' },
        { topic: 'OS module' },
        { topic: 'FS module' },
        { topic: 'Libuv' },
        { topic: 'Parts of HTTP request and response' },
        { topic: 'CORS headers' },
        { topic: 'Query asnd params' },
        { topic: 'Default size of thread pool' },
        { topic: 'REPL' },
        { topic: 'event loop' },
        { topic: 'Event loop Working' },
        { topic: 'microtasks and macrotasks' },
        { topic: 'scripts' },
        { topic: 'Create a server in node js' },
        { topic: 'Promise' },
        { topic: 'Promise states' },
        { topic: 'Promise Methods' },
        { topic: 'json methods' },
        { topic: 'Custom middleware implementation for session management' },
        { topic: 'Thread pool' },
        { topic: 'Crypto module' },
        { topic: 'Design patterns' },
        { topic: 'Res render' },
        { topic: 'Static folder' },
        { topic: 'Status codes' },
        { topic: 'Net' },
        { topic: 'Architecture of nodejs' },
        { topic: 'What is Node Js?' },
        { topic: 'Process' },
        { topic: 'Rest' },
        { topic: 'V8 engine' },
        { topic: 'Memoization' },
        { topic: 'What is Libuv?' },
        { topic: 'Res.download' },
        { topic: 'Os' },
        { topic: 'What is Express Js?' },
        { topic: 'Res.set' },
        { topic: 'cookie parser' },
        { topic: 'App.all' },
        { topic: 'How to start a new backend project from scratch' },
        { topic: 'Cookies' },
        { topic: 'App.set' },
        { topic: 'Body parser' },
        { topic: 'Stream' },
        { topic: 'Middleware' },
        { topic: 'Dev dependency' },
        { topic: 'Routing' },
        { topic: 'Middlewares for session validation' },
        { topic: 'Features of express.js' },
        { topic: 'Eventloop' },
        { topic: 'Task- after login don\'t go back to login page' },
        { topic: 'app.use' },
        { topic: 'Async tasks' },
        { topic: 'middleware' },
        { topic: 'Promise& callback' },
        { topic: 'Authorization' },
        { topic: 'app.set' },
        { topic: 'Environment variables (.env)' },
        { topic: 'Async await' },
        { topic: 'URL- params vs query' },
        { topic: 'Fs module' },
        { topic: 'Event loop' },
        { topic: 'HTTP methods' },
        { topic: 'callback function' },
        { topic: 'res.render' },
        { topic: 'Buffer and stream' },
        { topic: 'query params' },
        { topic: 'put& patch' },
        { topic: 'how to handle exception in promise' },
        { topic: 'express-session' },
        { topic: 'Process and thread' },
        { topic: 'authentication vs authorisation' },
        { topic: 'Dev dependencies' },
        { topic: 'Types of promise' },
        { topic: 'local Storage' },
        { topic: 'V8 Engine' },
        { topic: 'Design pattern' },
        { topic: 'single threaded' },
        { topic: 'Middlewares' },
        { topic: 'event driven programming' },
        { topic: 'MVC Arcitecture' },
        { topic: 'Package lock file' },
        { topic: 'REPL' },
        { topic: 'Static folder' },
        { topic: 'App.all' },
        { topic: 'dynamic parameter, req.params' },
        { topic: 'Hbs looping syntax' },
        { topic: 'promise.all vs promise.race' },
        { topic: 'callback and promise resolve' },
        { topic: 'code format' },
        { topic: 'res.status' },
        { topic: 'call back and promise' },
        { topic: 'fork()' },
        { topic: 'fs module' },
        { topic: 'res.end' },
        { topic: 'spawn()' },
        { topic: 'CORS (same origin policy)' },
        { topic: 'PUT and PATCH' },
        { topic: 'query vs params' },
        { topic: 'OPTIONS' },
        { topic: 'how nodejs handles concurrency' },
        { topic: 'devDependency' },
        { topic: 'Max age and expires' },
        { topic: 'util module' },
        { topic: 'Script in package.json' },
        { topic: 'Revise promises' },
        { topic: 'Architecture of nodejs' },
        { topic: 'Rest' },
        { topic: 'Memoization' },
        { topic: 'Os' },
        { topic: 'cookie parser' },
        { topic: 'Cookies' },
        { topic: 'Res.set' },
        { topic: 'Stream' },
        { topic: 'Child process' },
        { topic: 'Dev dependency' },
        { topic: 'use of middleware - task (not running)' },
        { topic: 'Session handling - pending' },
        { topic: 'login flow (frontend - backend)' },
        { topic: 'Types of modules' },
        { topic: 'Streams and its types' },
        { topic: 'app.set' },
        { topic: 'App.locals' },
        { topic: 'Res.write vs res.write' },
        { topic: 'libuv' },
        { topic: 'Event loop' },
        { topic: 'http request structure' },
        { topic: 'core modules' },
        { topic: 'session storage limit' },
        { topic: 'event loop (js vs node)' },
        { topic: 'type of streams' },
        { topic: 'cors policy' },
        { topic: 'cookie vs localStorage' },
        { topic: 'create a file' },
        { topic: 'session not proper in task' },
        { topic: 'Thread Pool' },
        { topic: 'req.params, req.query' },
        { topic: 'dynamic routing, req.params' },
        { topic: 'sometimes not working' },
        { topic: 'cluster module' },
        { topic: 'http Options' },
        { topic: 'req.query' },
        { topic: 'types of middleware' },
        { topic: 'type of middlewares' },
        { topic: 'CORS - preflight' },
        { topic: 'error handling middleware' },
        { topic: 'put vs patch' },
        { topic: 'Buffer class' },
        { topic: 'express.json()' },
        { topic: 'morgan' },
        { topic: 'options' },
        { topic: 'Event Emitter class' },
        { topic: 'CORS' },
        { topic: 'Thread vs process' },
        { topic: 'Command-line arguments' },
        { topic: 'worker threads' },
        { topic: 'user agent' },
        { topic: 'browser js event loop vs nodejs' },
        { topic: 'microtask, macrotask' },
        { topic: 'child process, fork(), spawn(), exec()' },
        { topic: 'CommonJS' },
        { topic: 'content negotiation' },
        { topic: 'req.query' },
        { topic: 'req.params' },
        { topic: 'app.set. app.locals' },
        { topic: 'app.all' },
        { topic: 'express.static' }
      ];
      
    

    const [search, setSearch] = useState("");

    const filteredTopics = topics.filter(t =>
        t.topic.toLowerCase().includes(search.toLowerCase())
    );

    return (
        <div className="p-4 max-w-screen-xl mx-auto">
            <h1 className="text-2xl font-bold mb-4 text-center">Node JS</h1>

            <input
                type="text"
                placeholder="Search topic..."
                value={search}
                onChange={e => setSearch(e.target.value)}
                className="w-full p-2 mb-6 border rounded-lg shadow-sm"
            />

            {/* Scrollable Container */}
            <div className="h-[400px] overflow-y-auto border rounded-xl p-4 shadow-inner bg-black">
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                    {filteredTopics.map((t, i) => (
                        <div
                            key={i}
                            className="p-4 bg-white border rounded-xl shadow hover:shadow-md transition-all duration-200"
                        >
                            <p className="text-gray-700 font-medium text-sm">{t.topic}</p>
                        </div>
                    ))}
                </div>
            </div>
        </div>
    );
};

export default NodeJs;
